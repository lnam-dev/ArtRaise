from django.contrib import admin
from django.utils.html import format_html
from .models import Slide


@admin.register(Slide)
class SlideAdmin(admin.ModelAdmin):
    """
    –ê–¥–º—ñ–Ω–∫–∞ –¥–ª—è –º–æ–¥–µ–ª—ñ Slide –≤ Django Admin.
    –î–æ–ø–æ–≤–Ω—é—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ Wagtail CMS –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ª–∞–π–¥–∞–º–∏.
    """
    
    list_display = [
        'title',
        'subtitle_short',
        'image_preview',
        'order',
        'is_active',
        'link_info',
        'created_at'
    ]
    
    list_filter = [
        'is_active',
        'created_at',
        'updated_at'
    ]
    
    search_fields = [
        'title',
        'subtitle',
        'description'
    ]
    
    ordering = ['order', '-created_at']
    
    readonly_fields = [
        'created_at',
        'updated_at',
        'link_preview'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', {
            'fields': ('title', 'subtitle', 'description', 'image')
        }),
        ('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è', {
            'fields': ('order', 'is_active')
        }),
        ('–ó–≤\'—è–∑–∫–∏ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è', {
            'fields': (
                'linked_artpiece',
                'linked_author', 
                'linked_event',
                'custom_link',
                'link_preview'
            ),
            'description': '–£–∫–∞–∂—ñ—Ç—å –∞–±–æ –ø–æ–≤\'—è–∑–∞–Ω–∏–π –æ–±\'—î–∫—Ç, –∞–±–æ –¥–æ–≤—ñ–ª—å–Ω—É –ø–æ—Å–∏–ª–∞–Ω–Ω—è'
        }),
        ('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def subtitle_short(self, obj):
        """–ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞"""
        if obj.subtitle:
            return obj.subtitle[:50] + '...' if len(obj.subtitle) > 50 else obj.subtitle
        return '-'
    subtitle_short.short_description = '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫'
    
    def image_preview(self, obj):
        """–ü—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Å–ø–∏—Å–∫—É"""
        if obj.image:
            return format_html(
                '<img src="{}" style="max-width: 100px; max-height: 60px; object-fit: cover;" />',
                obj.image.url
            )
        return '-'
    image_preview.short_description = '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è'

    def link_info(self, obj):
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Å–ø–∏—Å–∫—É"""
        if obj.linked_artpiece:
            return format_html(
                '<span style="color: #007cba;">üìñ {}</span>',
                obj.linked_artpiece.title
            )
        elif obj.linked_author:
            return format_html(
                '<span style="color: #e6522c;">üë§ {}</span>',
                obj.linked_author.name
            )
        elif obj.linked_event:
            return format_html(
                '<span style="color: #417505;">üìÖ {}</span>',
                obj.linked_event.title
            )
        elif obj.custom_link:
            return format_html(
                '<span style="color: #8f5902;">üîó {}</span>',
                obj.custom_link[:30] + '...' if len(obj.custom_link) > 30 else obj.custom_link
            )
        return format_html('<span style="color: #a40000;">‚ùå –ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è</span>')
    link_info.short_description = '–ü–æ—Å–∏–ª–∞–Ω–Ω—è'

    def link_preview(self, obj):
        """–ü—Ä–µ–≤—å—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ —Ñ–æ—Ä–º—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
        url = obj.get_link_url()
        if url:
            return format_html(
                '<a href="{}" target="_blank" style="color: #007cba;">üîó {}</a>',
                url, url
            )
        return '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –∑–∞–¥–∞–Ω–∞'
    link_preview.short_description = '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ—Å–∏–ª–∞–Ω–Ω—è'

    actions = ['activate_slides', 'deactivate_slides']
    
    def activate_slides(self, request, queryset):
        """–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å–ª–∞–π–¥–∏"""
        updated = queryset.update(is_active=True)
        self.message_user(
            request,
            f'–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} —Å–ª–∞–π–¥—ñ–≤.'
        )
    activate_slides.short_description = '–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å–ª–∞–π–¥–∏'

    def deactivate_slides(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å–ª–∞–π–¥–∏"""
        updated = queryset.update(is_active=False)
        self.message_user(
            request,
            f'–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ {updated} —Å–ª–∞–π–¥—ñ–≤.'
        )
    deactivate_slides.short_description = '–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ —Å–ª–∞–π–¥–∏'
