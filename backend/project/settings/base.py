"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta
from django.core.management.utils import get_random_secret_key

print("=== SETTINGS/BASE.PY START ===")
print(f"Current working directory: {os.getcwd()}")
print(f"Settings file path: {__file__}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(f"BASE_DIR: {BASE_DIR}")

# Завантажуємо змінні середовища з файлу .env, якщо він існує
print("Loading environment variables from .env...")
try:
    from dotenv import load_dotenv
    # Шукаємо файл .env в кореневій директорії проекту
    env_path = Path(__file__).resolve().parent.parent.parent / '.env'
    print(f"Looking for .env at: {env_path}")
    print(f".env exists: {env_path.exists()}")
    
    if env_path.exists():
        with open(env_path, 'r') as f:
            content = f.read()
            print(f".env content length: {len(content)} characters")
            lines = content.strip().split('\n')
            print(f".env has {len(lines)} lines")
            for i, line in enumerate(lines[:5]):  # Показуємо перші 5 рядків
                if '=' in line:
                    key, value = line.split('=', 1)
                    if 'SECRET' in key or 'PASS' in key:
                        print(f"  Line {i+1}: {key}={value[:8]}***")
                    else:
                        print(f"  Line {i+1}: {key}={value}")
    
    load_dotenv(env_path, override=True)  # Примусово перезаписуємо
    print("✓ dotenv loaded successfully")
    
    # Перевіряємо ключові змінні після завантаження
    print("Environment variables after .env loading:")
    key_vars = ['DB_NAME', 'DB_HOST', 'AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', 
                'AWS_STORAGE_BUCKET_NAME', 'AWS_S3_ENDPOINT_URL', 'MEDIA_URL']
    for key in key_vars:
        value = os.environ.get(key)
        if value:
            if 'SECRET' in key or 'PASS' in key:
                print(f"  {key}: {value[:8]}***")
            else:
                print(f"  {key}: {value}")
        else:
            print(f"  {key}: NOT SET")
            
except ImportError as e:
    print(f"❌ dotenv import failed: {e}")
    print("In production environment, dotenv may not be installed")
except Exception as e:
    print(f"❌ Error loading .env: {e}")
    import traceback
    traceback.print_exc()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'search',
    'artpiece',
    'authors',
    'events',
    'users',
    'faq',
    'slider',
    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail',
    'wagtail.api.v2',
    'modelcluster',
    'taggit',
    # Django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #DRF та додатки
    'rest_framework',
    'rest_framework_simplejwt',
    #CORS
    'corsheaders',
    #DigitalOcean Object Storage
    'storages',
]

print("=== CONFIGURING AWS/DIGITALOCEAN SPACES ===")
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL')
AWS_S3_CUSTOM_DOMAIN = os.environ.get('AWS_S3_CUSTOM_DOMAIN')

# Перевіряємо критичні налаштування
if not AWS_ACCESS_KEY_ID or not AWS_SECRET_ACCESS_KEY:
    print("❌ AWS credentials not set")
else:
    print("✓ AWS credentials configured")

if not AWS_STORAGE_BUCKET_NAME:
    print("❌ AWS bucket not set")
else:
    print("✓ AWS bucket configured")

# Додаткові налаштування для DigitalOcean Spaces
AWS_S3_FILE_OVERWRITE = False
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_DEFAULT_ACL = 'public-read'
AWS_S3_REGION_NAME = 'fra1'  # Регіон DigitalOcean (Frankfurt)
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_S3_ADDRESSING_STYLE = 'virtual'  # Важливо для S3-сумісних хостингів
AWS_S3_VERIFY = True

# Django 5.1+ використовує нове налаштування STORAGES
STORAGES = {
    "default": {
        "BACKEND": "project.storage_backends.DebugS3Boto3Storage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Для сумісності з більш старими версіями Django
DEFAULT_FILE_STORAGE = 'project.storage_backends.DebugS3Boto3Storage'

print("✓ Storage backends configured:")
print(f"  Default storage: {STORAGES['default']['BACKEND']}")
print(f"  Static storage: {STORAGES['staticfiles']['BACKEND']}")
print(f"  Legacy DEFAULT_FILE_STORAGE: {DEFAULT_FILE_STORAGE}")

print("=== AWS/DIGITALOCEAN SPACES CONFIGURED ===")

print("=== CONFIGURING REST FRAMEWORK ===")
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
}

# Налаштування JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Час життя токену
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'your-secret-key',  # Секретний ключ для підпису
}


AUTH_USER_MODEL = 'users.CustomUser'
WAGTAILUSERS_USER_MODEL = 'users.CustomUser'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'wagtail.contrib.redirects.middleware.RedirectMiddleware',

]

# Налаштування CORS (dev)
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# Налаштування Wagtail
WAGTAIL_SITE_NAME = 'My Example Site'
WAGTAILADMIN_BASE_URL = 'http://example.com'
WAGTAILDOCS_EXTENSIONS = ['csv', 'docx', 'key', 'odt', 'pdf', 'pptx', 'rtf', 'txt', 'xlsx', 'zip']

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

print("=== CONFIGURING DATABASE ===")
DB_NAME = os.environ.get('DB_NAME')
DB_USER = os.environ.get('DB_USER')
DB_PASS = os.environ.get('DB_PASS')
DB_HOST = os.environ.get('DB_HOST')
DB_PORT = os.environ.get('DB_PORT')

print(f"DB_NAME: {DB_NAME}")
print(f"DB_USER: {DB_USER}")
print(f"DB_PASS: {DB_PASS[:8]}*** (length: {len(DB_PASS) if DB_PASS else 0})")
print(f"DB_HOST: {DB_HOST}")
print(f"DB_PORT: {DB_PORT}")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASS,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        "OPTIONS": {
            "sslmode": "require",
        },
    }
}

print("✓ Database configuration completed")
print("=== DATABASE CONFIGURED ===")



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, '..', 'static/')
STATIC_URL = '/static/'

print("=== CONFIGURING STATIC AND MEDIA FILES ===")
print(f"STATIC_ROOT: {STATIC_ROOT}")
print(f"STATIC_URL: {STATIC_URL}")

# Media files - використовуємо DigitalOcean Spaces
MEDIA_URL = os.environ.get('MEDIA_URL', 'https://artraise-media.fra1.cdn.digitaloceanspaces.com/')
print(f"MEDIA_URL: {MEDIA_URL}")
print("=== STATIC AND MEDIA FILES CONFIGURED ===")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10_000

print("=== OTHER SETTINGS ===")
print(f"DEFAULT_AUTO_FIELD: {DEFAULT_AUTO_FIELD}")
print(f"DATA_UPLOAD_MAX_NUMBER_FIELDS: {DATA_UPLOAD_MAX_NUMBER_FIELDS}")
print("=== SETTINGS/BASE.PY COMPLETED ===")
